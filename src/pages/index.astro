---
// Finale Fotografen-Website mit allen Bildern & satten Farben
import { ViewTransitions } from 'astro:transitions';
import imageBerge from '../assets/images/image_Berge.JPG';
import imageBergeStrasse from '../assets/images/image_Bergemitstraße.JPG';
import imageBergeStrassePng from '../assets/images/image_Bergemitstraße.png';
import imageFrauFelder from '../assets/images/image_Frau_Felder.JPG';
import imageFrauSonne from '../assets/images/image_Frau_Sonne.png';
import imageFotoFitness from '../assets/images/image_foto_fitnesstudio.png';
import imageFotoshooting from '../assets/images/image_fotoshooting.png';
import imageFrau from '../assets/images/image_frau.PNG';
import imageFrau2 from '../assets/images/image_frau2.PNG';
import imageFrau2OhneHG from '../assets/images/image_frau2_ohne_hintergrund.PNG';
import imageFrauSport from '../assets/images/image_frau_beim_sport_laufen.png';
import imageLandscape from '../assets/images/image_landscape.PNG';
import imageMann from '../assets/images/image_mann.PNG';
import imageSchneeBaumPerson from '../assets/images/image_schnee mit baum und person.png';
import imageSchneeBaum from '../assets/images/image_schnee mit baum.JPG';
import imageSchneePersonRot from '../assets/images/image_schnee mit person_rotejacke.png';
import imageTalBerge from '../assets/images/image_tal_mit_bergen.png';
// Videos aus public/ Ordner verwenden
const videoBergen = { src: '/videos/video_von_bergen.mp4' };
const videoBergenWald = { src: '/videos/video_von_bergen und wald.mp4' };
---

<!DOCTYPE html>
<html lang="de" class="scroll-smooth">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Red Rotation Photography - Professionelle Fotografie</title>
  
  <!-- Astro View Transitions -->
  <ViewTransitions />
  
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Orbitron:wght@400;700;900&family=Space+Grotesk:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  
  <style>
    /* Satte, gestochen schwarze Farbpalette */
    :root {
      --black: #000000;
      --charcoal: #1a1a1a;
      --dark-gray: #2d2d2d;
      --medium-gray: #4a4a4a;
      --light-gray: #8a8a8a;
      --white: #ffffff;
      --accent-gold: #d4af37;
      --accent-silver: #c0c0c0;
      --shadow-deep: rgba(0, 0, 0, 0.8);
      --shadow-soft: rgba(0, 0, 0, 0.3);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Space Grotesk', sans-serif;
      background: var(--black);
      color: var(--white);
      overflow-x: hidden;
      line-height: 1.6;
    }

    .serif {
      font-family: 'Bebas Neue', sans-serif;
      letter-spacing: 2px;
    }

    .tech {
      font-family: 'Orbitron', monospace;
      letter-spacing: 1px;
    }

    /* === HERO SECTION === */
    .hero {
      height: 100vh;
      position: relative;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .parallax-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
      overflow: hidden;
    }

    .parallax-bg {
      position: absolute;
      top: -20%;
      left: -20%;
      width: 140%;
      height: 140%;
      background-image: url('/image_hintergrund_von_bergspitze.png');
      background-size: cover;
      background-position: center;
      will-change: transform;
      filter: brightness(0.7) contrast(1.1);
    }

    .parallax-fg {
      position: absolute;
      top: -10%;
      left: -10%;
      width: 120%;
      height: 120%;
      background-image: url('/image_bergspitze_ohne_hintergrund.png');
      background-size: contain;
      background-position: center bottom;
      background-repeat: no-repeat;
      will-change: transform;
      z-index: 2;
      filter: brightness(0.8) contrast(1.2);
    }

    .hero-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        135deg,
        rgba(0, 0, 0, 0.4) 0%,
        rgba(0, 0, 0, 0.2) 30%,
        rgba(0, 0, 0, 0.1) 70%,
        rgba(0, 0, 0, 0.3) 100%
      );
      z-index: 3;
    }

    .hero-content {
      position: relative;
      z-index: 10;
      text-align: center;
      color: var(--white);
      max-width: 900px;
      padding: 0 2rem;
    }

    .hero-title {
      font-size: clamp(4rem, 10vw, 8rem);
      font-weight: 700;
      line-height: 0.9;
      margin-bottom: 2rem;
      text-shadow: 2px 2px 8px var(--shadow-deep);
      opacity: 0;
      transform: translateY(50px);
      animation: fadeInUp 1.5s ease-out 0.5s forwards;
    }

    .hero-subtitle {
      font-size: clamp(1.2rem, 3vw, 1.8rem);
      font-weight: 300;
      margin-bottom: 3rem;
      opacity: 0.95;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
      opacity: 0;
      transform: translateY(30px);
      animation: fadeInUp 1.5s ease-out 0.8s forwards;
    }

    .cta-button {
      display: inline-flex;
      align-items: center;
      padding: 1.2rem 3rem;
      border: 2px solid var(--accent-gold);
      background: rgba(212, 175, 55, 0.1);
      color: var(--accent-gold);
      text-decoration: none;
      font-weight: 600;
      letter-spacing: 1px;
      text-transform: uppercase;
      border-radius: 50px;
      backdrop-filter: blur(10px);
      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      opacity: 0;
      transform: translateY(30px);
      animation: fadeInUp 1.5s ease-out 1.1s forwards;
      position: relative;
      overflow: hidden;
    }

    .cta-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.6s;
    }

    .cta-button:hover::before {
      left: 100%;
    }

    .cta-button:hover {
      background: var(--accent-gold);
      color: var(--black);
      transform: translateY(-3px) scale(1.02);
      box-shadow: 0 10px 30px var(--shadow-deep);
    }

    /* === NAVIGATION === */
    .nav {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 100;
      padding: 2rem;
      background: linear-gradient(to bottom, var(--black), transparent);
      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      backdrop-filter: blur(0px);
    }

    .nav.scrolled {
      background: rgba(0, 0, 0, 0.95);
      backdrop-filter: blur(20px);
      padding: 1rem 2rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .nav-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      max-width: 1400px;
      margin: 0 auto;
    }

    .logo {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--accent-gold);
      text-decoration: none;
    }

    .nav-links {
      display: flex;
      gap: 3rem;
      list-style: none;
    }

    .nav-links a {
      color: var(--white);
      text-decoration: none;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 1px;
      transition: color 0.3s ease;
    }

    .nav-links a:hover {
      color: var(--accent-gold);
    }

    /* === LANDSCAPE SECTION === */
    .landscapes {
      padding: 8rem 2rem;
      background: var(--black);
    }

    .section-title {
      font-size: clamp(3rem, 8vw, 6rem);
      text-align: center;
      margin-bottom: 4rem;
      color: var(--white);
      text-shadow: 2px 2px 4px var(--shadow-deep);
    }

    .landscape-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 3rem;
      max-width: 1400px;
      margin: 0 auto;
    }

    .landscape-item {
      position: relative;
      aspect-ratio: 16/10;
      overflow: hidden;
      border-radius: 0;
      background: var(--dark-gray);
      transition: all 0.6s ease;
      cursor: pointer;
      transform-style: preserve-3d;
      perspective: 1000px;
    }

    .landscape-item:hover {
      transform: translateY(-10px) scale(1.02);
      box-shadow: 0 20px 60px var(--shadow-deep);
    }

    .landscape-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: all 0.3s ease;
      filter: brightness(0.8) contrast(1.1) saturate(1.2);
      transform-style: preserve-3d;
      will-change: transform;
    }

    .landscape-item:hover img {
      transform: scale(1.1);
      filter: brightness(1) contrast(1.2) saturate(1.3) blur(0px);
      animation: liquidDistortion 0.6s ease-out;
    }

    .landscape-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, var(--shadow-deep));
      padding: 2rem;
      transform: translateY(100%);
      transition: transform 0.4s ease;
    }

    .landscape-item:hover .landscape-overlay {
      transform: translateY(0);
    }

    .landscape-title {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--white);
      margin-bottom: 0.5rem;
    }

    .landscape-desc {
      color: var(--light-gray);
      font-size: 0.9rem;
    }

    /* === PORTRAIT SECTION === */
    .portraits {
      padding: 8rem 2rem;
      background: var(--black);
    }

    .portrait-masonry {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      grid-auto-rows: 400px;
      gap: 2rem;
      max-width: 1400px;
      margin: 0 auto;
    }

    .portrait-item {
      position: relative;
      overflow: hidden;
      background: var(--dark-gray);
      transition: all 0.5s ease;
      transform-style: preserve-3d;
      perspective: 1000px;
    }

    .portrait-item:nth-child(3n) {
      grid-row: span 2;
    }

    .portrait-item:nth-child(5n) {
      grid-column: span 2;
    }

    .portrait-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: all 0.3s ease;
      filter: brightness(0.9) contrast(1.1);
      transform-style: preserve-3d;
      will-change: transform;
    }

    .portrait-item:hover {
      transform: scale(1.05);
      z-index: 10;
      box-shadow: 0 25px 80px var(--shadow-deep);
    }

    .portrait-item:hover img {
      filter: brightness(1.1) contrast(1.2) blur(0px);
      animation: liquidWave 0.8s ease-out;
    }


    /* === SPORT SECTION === */
    .sport {
      padding: 8rem 2rem;
      background: var(--black);
    }

    .sport-grid {
      display: grid;
      grid-template-columns: 2fr 1fr 1fr;
      grid-template-rows: 300px 300px;
      gap: 2rem;
      max-width: 1400px;
      margin: 0 auto;
    }

    .sport-item {
      position: relative;
      overflow: hidden;
      background: var(--dark-gray);
      transition: all 0.4s ease;
    }

    .sport-item:first-child {
      grid-row: span 2;
    }

    .sport-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: all 0.4s ease;
      filter: brightness(0.8) contrast(1.3) saturate(1.1);
    }

    .sport-item:hover {
      transform: scale(1.03);
      box-shadow: 0 15px 50px var(--shadow-deep);
    }

    .sport-item:hover img {
      transform: scale(1.1);
      filter: brightness(1) contrast(1.4) saturate(1.2) blur(0px);
      animation: liquidRipple 0.5s ease-out;
    }

    /* === CONTACT SECTION === */
    .contact {
      padding: 8rem 2rem;
      background: var(--charcoal);
      text-align: center;
    }

    .contact h2 {
      font-size: clamp(3rem, 8vw, 6rem);
      margin-bottom: 2rem;
      color: var(--accent-gold);
    }

    .contact p {
      font-size: 1.3rem;
      color: var(--light-gray);
      margin-bottom: 4rem;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .contact-button {
      display: inline-flex;
      align-items: center;
      padding: 1.5rem 4rem;
      background: var(--accent-gold);
      color: var(--black);
      text-decoration: none;
      font-weight: 700;
      font-size: 1.1rem;
      text-transform: uppercase;
      letter-spacing: 1px;
      transition: all 0.4s ease;
    }

    .contact-button:hover {
      background: var(--white);
      transform: translateY(-3px);
      box-shadow: 0 15px 40px var(--shadow-deep);
    }

    /* === ANIMATIONS === */
    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-10px); }
    }

    @keyframes pulse {
      0%, 100% { opacity: 0.6; }
      50% { opacity: 1; }
    }

    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }

    /* 🔥 LIQUID DISTORTION ANIMATIONS 🔥 */
    @keyframes liquidDistortion {
      0% { 
        filter: brightness(1) contrast(1.2) saturate(1.3) blur(0px);
        transform: scale(1.1) skew(0deg, 0deg);
      }
      20% { 
        filter: brightness(1.1) contrast(1.3) saturate(1.4) blur(2px);
        transform: scale(1.12) skew(2deg, 1deg);
      }
      40% { 
        filter: brightness(1.05) contrast(1.25) saturate(1.35) blur(1px);
        transform: scale(1.115) skew(-1deg, 2deg);
      }
      60% { 
        filter: brightness(1.08) contrast(1.28) saturate(1.38) blur(3px);
        transform: scale(1.118) skew(1deg, -1deg);
      }
      80% { 
        filter: brightness(1.02) contrast(1.22) saturate(1.32) blur(1px);
        transform: scale(1.112) skew(-0.5deg, 0.5deg);
      }
      100% { 
        filter: brightness(1) contrast(1.2) saturate(1.3) blur(0px);
        transform: scale(1.1) skew(0deg, 0deg);
      }
    }

    @keyframes liquidWave {
      0% { 
        filter: brightness(1.1) contrast(1.2) blur(0px);
        transform: scale(1) perspective(1000px) rotateX(0deg) rotateY(0deg);
      }
      25% { 
        filter: brightness(1.15) contrast(1.25) blur(1px);
        transform: scale(1.02) perspective(1000px) rotateX(2deg) rotateY(-1deg);
      }
      50% { 
        filter: brightness(1.12) contrast(1.23) blur(2px);
        transform: scale(1.03) perspective(1000px) rotateX(-1deg) rotateY(2deg);
      }
      75% { 
        filter: brightness(1.18) contrast(1.27) blur(1px);
        transform: scale(1.025) perspective(1000px) rotateX(1deg) rotateY(-0.5deg);
      }
      100% { 
        filter: brightness(1.1) contrast(1.2) blur(0px);
        transform: scale(1) perspective(1000px) rotateX(0deg) rotateY(0deg);
      }
    }

    @keyframes liquidRipple {
      0% { 
        filter: brightness(0.8) contrast(1.3) saturate(1.1) blur(0px);
        transform: scale(1);
      }
      30% { 
        filter: brightness(1.2) contrast(1.4) saturate(1.2) blur(3px);
        transform: scale(1.05);
      }
      60% { 
        filter: brightness(0.9) contrast(1.35) saturate(1.15) blur(1px);
        transform: scale(1.03);
      }
      100% { 
        filter: brightness(0.8) contrast(1.3) saturate(1.1) blur(0px);
        transform: scale(1);
      }
    }

    .scroll-reveal {
      opacity: 0;
      transform: translateY(50px);
      transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }

    .scroll-reveal.revealed {
      opacity: 1;
      transform: translateY(0);
    }

    .stagger-1 { transition-delay: 0.1s; }
    .stagger-2 { transition-delay: 0.2s; }
    .stagger-3 { transition-delay: 0.3s; }
    .stagger-4 { transition-delay: 0.4s; }
    .stagger-5 { transition-delay: 0.5s; }
    .stagger-6 { transition-delay: 0.6s; }

    /* Floating Particles */
    .floating-particles {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 4;
    }

    .particle {
      position: absolute;
      width: 4px;
      height: 4px;
      background: rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      animation: float 6s ease-in-out infinite;
    }

    .particle:nth-child(1) { left: 10%; top: 20%; animation-delay: 0s; }
    .particle:nth-child(2) { left: 80%; top: 30%; animation-delay: 2s; }
    .particle:nth-child(3) { left: 20%; top: 70%; animation-delay: 4s; }
    .particle:nth-child(4) { left: 70%; top: 60%; animation-delay: 1s; }
    .particle:nth-child(5) { left: 30%; top: 40%; animation-delay: 3s; }
    .particle:nth-child(6) { left: 90%; top: 80%; animation-delay: 5s; }

    /* === RESPONSIVE === */
    
    /* Large Screens (1920px+) - Zeige ganzes Bild */
    @media (min-width: 1920px) {
      .parallax-bg {
        top: -10%;
        left: -10%;
        width: 120%;
        height: 120%;
      }
      
      .parallax-fg {
        top: -5%;
        left: -5%;
        width: 110%;
        height: 110%;
      }
    }
    
    /* Desktop (1024px - 1920px) */
    @media (max-width: 1919px) and (min-width: 1025px) {
      .parallax-bg {
        top: -15%;
        left: -15%;
        width: 130%;
        height: 130%;
      }
      
      .parallax-fg {
        top: -8%;
        left: -8%;
        width: 116%;
        height: 116%;
      }
    }

    @media (max-width: 1024px) {
      .hero-title {
        font-size: clamp(3rem, 8vw, 6rem);
      }
      
      .landscape-grid {
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
      }
      
      .portrait-masonry {
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      }
      
      /* Tablet - mehr Zoom für bessere Sichtbarkeit */
      .parallax-bg {
        top: -25%;
        left: -25%;
        width: 150%;
        height: 150%;
      }
      
      .parallax-fg {
        top: -15%;
        left: -15%;
        width: 130%;
        height: 130%;
      }
    }

    @media (max-width: 768px) {
      .nav-links {
        display: none;
      }
      
      .hero-content {
        padding: 0 1rem;
      }
      
      .hero-subtitle {
        font-size: 1.1rem;
        line-height: 1.6;
      }
      
      .landscape-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
      }
      
      .portrait-masonry {
        grid-template-columns: 1fr;
        grid-auto-rows: 300px;
      }
      
      .portrait-item:nth-child(3n),
      .portrait-item:nth-child(5n) {
        grid-row: span 1;
        grid-column: span 1;
      }
      
      
      .sport-grid {
        grid-template-columns: 1fr;
        grid-template-rows: repeat(3, 250px);
        gap: 1.5rem;
      }
      
      .sport-item:first-child {
        grid-row: span 1;
      }
      
      .section-title {
        font-size: clamp(2.5rem, 6vw, 4rem);
        margin-bottom: 2rem;
      }
      
      .floating-particles {
        display: none;
      }
      
      /* Mobile - Optimiert für Portrait-Format */
      .parallax-bg {
        top: -35%;
        left: -35%;
        width: 170%;
        height: 170%;
        background-position: center center;
      }
      
      .parallax-fg {
        top: -20%;
        left: -20%;
        width: 140%;
        height: 140%;
      }
    }

    @media (max-width: 480px) {
      .nav {
        padding: 1rem;
      }
      
      .hero-title {
        font-size: clamp(2.5rem, 10vw, 4rem);
        margin-bottom: 1rem;
      }
      
      .hero-subtitle {
        font-size: 1rem;
        margin-bottom: 2rem;
      }
      
      .cta-button {
        padding: 1rem 2rem;
        font-size: 0.9rem;
      }
      
      .landscapes,
      .portraits,
      .sport,
      .contact {
        padding: 4rem 1rem;
      }
      
      .video-buffer {
        height: 40vh;
      }
      
      .video-buffer-quote {
        font-size: clamp(1.2rem, 4vw, 1.8rem);
      }
    }

    /* Performance Optimizations */
    .parallax-container,
    .landscape-item,
    .portrait-item,
    .sport-item {
      will-change: transform;
    }


    /* === VIDEO BUFFER SECTIONS === */
    .video-buffer {
      height: 60vh;
      position: relative;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .video-buffer video {
      position: absolute;
      top: 50%;
      left: 50%;
      min-width: 100%;
      min-height: 100%;
      width: auto;
      height: auto;
      transform: translate(-50%, -50%);
      object-fit: cover;
      filter: brightness(0.7) contrast(1.1);
      z-index: 1;
    }

    .video-buffer-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        45deg,
        rgba(0, 0, 0, 0.4) 0%,
        rgba(0, 0, 0, 0.2) 50%,
        rgba(0, 0, 0, 0.4) 100%
      );
      z-index: 2;
    }

    .video-buffer-content {
      position: relative;
      z-index: 3;
      text-align: center;
      color: var(--white);
      max-width: 600px;
      padding: 0 2rem;
    }

    .video-buffer-quote {
      font-size: clamp(1.5rem, 4vw, 2.5rem);
      font-weight: 300;
      line-height: 1.4;
      margin-bottom: 1rem;
      opacity: 1;
      transform: translateY(0);
      text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
      transition: all 0.8s ease;
    }

    .video-buffer-author {
      font-size: 1rem;
      opacity: 0.9;
      font-weight: 500;
      text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.8);
      transition: all 0.8s ease;
    }

    @media (prefers-reduced-motion: reduce) {
      * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    }
  </style>
</head>

<body>
  <!-- Navigation -->
  <nav class="nav" id="nav">
    <div class="nav-content">
      <a href="#hero" class="logo serif">Red Rotation</a>
      <ul class="nav-links">
        <li><a href="#landscapes">Landschaften</a></li>
        <li><a href="#portraits">Portraits</a></li>
        <li><a href="#sport">Sport</a></li>
        <li><a href="#contact">Kontakt</a></li>
      </ul>
    </div>
  </nav>

  <!-- Hero Section -->
  <section class="hero" id="hero">
    <div class="parallax-container">
      <div class="parallax-bg" id="parallax-bg"></div>
      <div class="parallax-fg" id="parallax-fg"></div>
    </div>
    
    <!-- Floating Particles -->
    <div class="floating-particles">
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
    </div>
    
    <div class="hero-overlay"></div>
    
    <div class="hero-content">
      <h1 class="hero-title serif">
        Pure<br>
        Fotografie
      </h1>
      <p class="hero-subtitle">
        Kraftvolle Bilder. Authentische Momente. Unverfälschte Emotionen.<br>
        Professionelle Fotografie in ihrer reinsten Form.
      </p>
      <a href="#landscapes" class="cta-button">
        Portfolio entdecken
      </a>
    </div>
  </section>

  <!-- Landscapes Section -->
  <section class="landscapes" id="landscapes">
    <h2 class="section-title serif scroll-reveal">Landschaften</h2>
    <div class="landscape-grid">
      <div class="landscape-item scroll-reveal stagger-1">
        <img src={imageBerge.src} alt="Berglandschaft">
        <div class="landscape-overlay">
          <div class="landscape-title">Alpine Majestät</div>
          <div class="landscape-desc">Dramatische Berglandschaften in perfektem Licht</div>
        </div>
      </div>
      
      <div class="landscape-item scroll-reveal stagger-2">
        <img src={imageBergeStrasse.src} alt="Bergstraße">
        <div class="landscape-overlay">
          <div class="landscape-title">Serpentinen</div>
          <div class="landscape-desc">Winding roads through majestic peaks</div>
        </div>
      </div>
      
      <div class="landscape-item scroll-reveal stagger-3">
        <img src={imageSchneeBaum.src} alt="Winterlandschaft">
        <div class="landscape-overlay">
          <div class="landscape-title">Winterstille</div>
          <div class="landscape-desc">Peaceful winter morning</div>
        </div>
      </div>
      
      <div class="landscape-item scroll-reveal stagger-4">
        <img src={imageTalBerge.src} alt="Tal mit Bergen">
        <div class="landscape-overlay">
          <div class="landscape-title">Weite Täler</div>
          <div class="landscape-desc">Endless valley panoramas</div>
        </div>
      </div>
      
      <div class="landscape-item scroll-reveal stagger-5">
        <img src={imageLandscape.src} alt="Landschaftspanorama">
        <div class="landscape-overlay">
          <div class="landscape-title">Horizonte</div>
          <div class="landscape-desc">Where earth meets sky</div>
        </div>
      </div>
      
      <div class="landscape-item scroll-reveal stagger-6">
        <img src={imageSchneeBaumPerson.src} alt="Schnee mit Person">
        <div class="landscape-overlay">
          <div class="landscape-title">Einsamkeit</div>
          <div class="landscape-desc">Solitude in the snow</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Video Buffer 1 -->
  <section class="video-buffer" id="video-buffer-1">
    <video muted loop playsinline preload="metadata" autoplay data-smart-video>
      <source src={videoBergen.src} type="video/mp4">
    </video>
    <div class="video-buffer-overlay"></div>
    <div class="video-buffer-content">
      <p class="video-buffer-quote serif">
        "Jeder Moment ist einzigartig – ich halte ihn für die Ewigkeit fest."
      </p>
      <p class="video-buffer-author">— Red Rotation Photography</p>
    </div>
  </section>

  <!-- Portrait Section -->
  <section class="portraits" id="portraits">
    <h2 class="section-title serif scroll-reveal">Portraits</h2>
    <div class="portrait-masonry">
      <div class="portrait-item scroll-reveal">
        <img src={imageFrauFelder.src} alt="Portrait in der Natur">
      </div>
      
      <div class="portrait-item scroll-reveal">
        <img src={imageFrauSonne.src} alt="Portrait im Sonnenlicht">
      </div>
      
      <div class="portrait-item scroll-reveal">
        <img src={imageFrau.src} alt="Portrait">
      </div>
      
      <div class="portrait-item scroll-reveal">
        <img src={imageFrau2.src} alt="Portrait 2">
      </div>
      
      <div class="portrait-item scroll-reveal">
        <img src={imageMann.src} alt="Männerportrait">
      </div>
      
      <div class="portrait-item scroll-reveal">
        <img src={imageSchneePersonRot.src} alt="Winterportrait">
      </div>
    </div>
  </section>

  <!-- Video Buffer: Wald & Berge -->
  <section class="video-buffer" id="video-buffer-2">
    <video muted loop playsinline preload="metadata" autoplay data-smart-video>
      <source src={videoBergenWald.src} type="video/mp4">
    </video>
    <div class="video-buffer-overlay"></div>
    <div class="video-buffer-content">
      <p class="video-buffer-quote serif">
        "In der Stille der Natur finden wir die lautesten Geschichten."
      </p>
      <p class="video-buffer-author">— Philosophie der Fotografie</p>
    </div>
  </section>

  <!-- Sport Section -->
  <section class="sport" id="sport">
    <h2 class="section-title serif scroll-reveal">Sport & Lifestyle</h2>
    <div class="sport-grid">
      <div class="sport-item scroll-reveal">
        <img src={imageFrauSport.src} alt="Sport Action">
      </div>
      
      <div class="sport-item scroll-reveal">
        <img src={imageFotoFitness.src} alt="Fitness Studio">
      </div>
      
      <div class="sport-item scroll-reveal">
        <img src={imageFotoshooting.src} alt="Fotoshooting">
      </div>
    </div>
  </section>

  <!-- Video Buffer: Berge Action -->
  <section class="video-buffer" id="video-buffer-3">
    <video muted loop playsinline preload="metadata" autoplay data-smart-video>
      <source src={videoBergen.src} type="video/mp4">
    </video>
    <div class="video-buffer-overlay"></div>
    <div class="video-buffer-content">
      <p class="video-buffer-quote serif">
        "Bewegung ist Leben – ich zeige die Energie des Augenblicks."
      </p>
      <p class="video-buffer-author">— Sport & Action Photography</p>
    </div>
  </section>

  <!-- Contact Section -->
  <section class="contact" id="contact">
    <h2 class="serif scroll-reveal">Let's Create</h2>
    <p class="scroll-reveal">
      Bereit für außergewöhnliche Bilder? Lass uns dein nächstes Projekt besprechen 
      und unvergessliche visuelle Geschichten schaffen.
    </p>
    <a href="mailto:hello@redrotation.photo" class="contact-button scroll-reveal">
      Projekt starten
    </a>
  </section>

  <!-- JavaScript -->
  <script define:vars={{ videoBergen: videoBergen.src, videoBergenWald: videoBergenWald.src }}>
    document.addEventListener('DOMContentLoaded', function() {
      // Parallax Effect wird jetzt durch das kombinierte 3D-System gehandelt

      // Scroll Reveal Animation
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('revealed');
          }
        });
      }, observerOptions);

      document.querySelectorAll('.scroll-reveal').forEach(el => {
        observer.observe(el);
      });

      // Smooth Scrolling
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });


      // Enhanced Navigation on Scroll
      const nav = document.getElementById('nav');
      let lastScrollY = window.scrollY;
      
      window.addEventListener('scroll', () => {
        const currentScrollY = window.scrollY;
        
        if (currentScrollY > 100) {
          nav.classList.add('scrolled');
        } else {
          nav.classList.remove('scrolled');
        }
        
        // Hide nav when scrolling down, show when scrolling up
        if (currentScrollY > lastScrollY && currentScrollY > 200) {
          nav.style.transform = 'translateY(-100%)';
        } else {
          nav.style.transform = 'translateY(0)';
        }
        
        lastScrollY = currentScrollY;
      });


      // Auto-play video buffers when in viewport
      const videoBuffers = document.querySelectorAll('.video-buffer video');
      let activeVideo = null;
      
      const bufferObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const video = entry.target;
          if (entry.isIntersecting) {
            // Stop previously active video
            if (activeVideo && activeVideo !== video) {
              activeVideo.pause();
            }
            
            // Start current video
            activeVideo = video;
            video.currentTime = 0; // Reset to beginning
            const playPromise = video.play();
            
            if (playPromise !== undefined) {
              playPromise.catch(e => {
                console.log('Autoplay prevented for video buffer:', e.message);
              });
            }
          } else {
            // Only pause if this was the active video
            if (activeVideo === video) {
              video.pause();
              activeVideo = null;
            }
          }
        });
      }, { 
        threshold: 0.4,
        rootMargin: '0px 0px -10% 0px'
      });

      videoBuffers.forEach(video => {
        bufferObserver.observe(video);
        
        // Pre-load videos
        video.addEventListener('loadedmetadata', () => {
          video.currentTime = 0;
        });
        
        // Handle video loading errors
        video.addEventListener('error', (e) => {
          console.log('Video loading error:', e);
        });
      });

      // Animate video buffer content on scroll
      const bufferContents = document.querySelectorAll('.video-buffer-content');
      const contentObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const quotes = entry.target.querySelectorAll('.video-buffer-quote, .video-buffer-author');
            quotes.forEach((element, index) => {
              setTimeout(() => {
                element.style.opacity = '1';
                element.style.transform = 'translateY(0)';
              }, index * 200);
            });
          }
        });
      }, { threshold: 0.5 });

      bufferContents.forEach(content => {
        contentObserver.observe(content);
      });

      // Smart Video Script für data-smart-video
      const smartVideos = document.querySelectorAll('[data-smart-video]');
      
      const smartVideoObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const video = entry.target;
          if (entry.isIntersecting) {
            video.play().catch(e => console.log("Smart Video Autoplay verhindert:", e));
          } else {
            video.pause();
          }
        });
      }, { threshold: 0.3 });

      smartVideos.forEach((video) => smartVideoObserver.observe(video));

      // 🔥 CURSOR-GESTEUERTE 3D-PARALLAXE 🔥
      const parallaxElements = document.querySelectorAll('.landscape-item, .portrait-item, .sport-item');
      
      parallaxElements.forEach(element => {
        const img = element.querySelector('img');
        if (!img) return;
        
        element.addEventListener('mousemove', (e) => {
          const rect = element.getBoundingClientRect();
          const centerX = rect.left + rect.width / 2;
          const centerY = rect.top + rect.height / 2;
          
          // Cursor-Position relativ zum Element-Zentrum
          const x = e.clientX - centerX;
          const y = e.clientY - centerY;
          
          // 3D-Rotation basierend auf Cursor-Position
          const rotateX = (y / rect.height) * -20; // Max 20 Grad
          const rotateY = (x / rect.width) * 20;   // Max 20 Grad
          
          // Smooth 3D-Transform
          img.style.transform = `
            perspective(1000px) 
            rotateX(${rotateX}deg) 
            rotateY(${rotateY}deg) 
            translateZ(20px)
            scale3d(1.05, 1.05, 1.05)
          `;
          
          // Zusätzlicher Parallax-Effekt für das Container
          element.style.transform = `
            translateX(${x * 0.02}px) 
            translateY(${y * 0.02}px)
          `;
        });
        
        
        // Touch-Support für Mobile
        element.addEventListener('touchmove', (e) => {
          if (e.touches.length === 1) {
            const touch = e.touches[0];
            const rect = element.getBoundingClientRect();
            const centerX = rect.left + rect.width / 2;
            const centerY = rect.top + rect.height / 2;
            
            const x = touch.clientX - centerX;
            const y = touch.clientY - centerY;
            
            const rotateX = (y / rect.height) * -15; // Weniger intensiv auf Mobile
            const rotateY = (x / rect.width) * 15;
            
            img.style.transform = `
              perspective(1000px) 
              rotateX(${rotateX}deg) 
              rotateY(${rotateY}deg) 
              translateZ(15px)
              scale3d(1.03, 1.03, 1.03)
            `;
          }
        });
        
      });

      // 🏔️ SCROLL-PARALLAX - Bergspitze bleibt, Hintergrund bewegt sich
      const parallaxBg = document.getElementById('parallax-bg');
      const parallaxFg = document.getElementById('parallax-fg');
      let ticking = false;

      function updateParallax() {
        const scrolled = window.pageYOffset;
        const viewportHeight = window.innerHeight;
        const scrollProgress = scrolled / viewportHeight;
        
        // Hintergrund bewegt sich langsam und zoomt
        const bgTransform = scrolled * 0.3;
        const bgScale = 1 + (scrollProgress * 0.2);
        parallaxBg.style.transform = `translateY(${bgTransform}px) scale(${bgScale})`;
        
        // Bergspitze bleibt fast stehen (sehr langsame Bewegung)
        const fgTransform = scrolled * 0.1;
        parallaxFg.style.transform = `translateY(${fgTransform}px)`;
        
        ticking = false;
      }

      function requestTick() {
        if (!ticking) {
          requestAnimationFrame(updateParallax);
          ticking = true;
        }
      }

      window.addEventListener('scroll', requestTick, { passive: true });
      

      // 🌊 ADVANCED LIQUID DISTORTION SYSTEM 🌊
      const liquidElements = document.querySelectorAll('.landscape-item img, .portrait-item img, .sport-item img');
      
      liquidElements.forEach(img => {
        const container = img.closest('.landscape-item, .portrait-item, .sport-item');
        let liquidTimeout;
        
        container.addEventListener('mouseenter', () => {
          // Trigger verschiedene Liquid-Effekte basierend auf Element-Typ
          if (container.classList.contains('landscape-item')) {
            img.style.animation = 'liquidDistortion 0.6s ease-out';
          } else if (container.classList.contains('portrait-item')) {
            img.style.animation = 'liquidWave 0.8s ease-out';
          } else if (container.classList.contains('sport-item')) {
            img.style.animation = 'liquidRipple 0.5s ease-out';
          }
        });
        
        container.addEventListener('mousemove', (e) => {
          const rect = container.getBoundingClientRect();
          const x = ((e.clientX - rect.left) / rect.width) - 0.5;
          const y = ((e.clientY - rect.top) / rect.height) - 0.5;
          
          // Dynamische Liquid-Verzerrung basierend auf Cursor-Position
          const intensity = 3;
          const skewX = x * intensity;
          const skewY = y * intensity;
          const blur = Math.abs(x) + Math.abs(y);
          
          clearTimeout(liquidTimeout);
          liquidTimeout = setTimeout(() => {
            img.style.filter = `
              brightness(${1 + Math.abs(x * 0.1)}) 
              contrast(${1.2 + Math.abs(y * 0.1)}) 
              saturate(${1.3 + blur * 0.2}) 
              blur(${blur * 2}px)
            `;
            img.style.transform = `
              scale(${1.1 + blur * 0.02}) 
              skew(${skewX}deg, ${skewY}deg)
            `;
          }, 10);
        });
        
        
        // Touch-Support für Mobile Liquid Effects
        container.addEventListener('touchstart', (e) => {
          if (e.touches.length === 1) {
            if (container.classList.contains('landscape-item')) {
              img.style.animation = 'liquidDistortion 0.6s ease-out';
            } else if (container.classList.contains('portrait-item')) {
              img.style.animation = 'liquidWave 0.8s ease-out';
            } else if (container.classList.contains('sport-item')) {
              img.style.animation = 'liquidRipple 0.5s ease-out';
            }
          }
        });
        
      });

      // 🎨 RIPPLE EFFECT beim Klick
      liquidElements.forEach(img => {
        const container = img.closest('.landscape-item, .portrait-item, .sport-item');
        
        container.addEventListener('click', (e) => {
          // Erstelle Ripple-Element
          const ripple = document.createElement('div');
          const rect = container.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          
          ripple.style.position = 'absolute';
          ripple.style.borderRadius = '50%';
          ripple.style.background = 'rgba(255, 255, 255, 0.3)';
          ripple.style.transform = 'scale(0)';
          ripple.style.animation = 'rippleEffect 0.6s linear';
          ripple.style.left = (x - 50) + 'px';
          ripple.style.top = (y - 50) + 'px';
          ripple.style.width = '100px';
          ripple.style.height = '100px';
          ripple.style.pointerEvents = 'none';
          ripple.style.zIndex = '5';
          
          container.style.position = 'relative';
          container.appendChild(ripple);
          
          setTimeout(() => {
            ripple.remove();
          }, 600);
        });
      });
    });

    // CSS für Ripple-Effekt
    const rippleCSS = `
      @keyframes rippleEffect {
        to {
          transform: scale(4);
          opacity: 0;
        }
      }
    `;
    
    const styleSheet = document.createElement('style');
    styleSheet.textContent = rippleCSS;
    document.head.appendChild(styleSheet);

    // 🎬 CLEAN VIEW TRANSITIONS 🎬
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        
        if (target && document.startViewTransition) {
          document.startViewTransition(() => {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          });
        } else if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  </script>
</body>
</html>