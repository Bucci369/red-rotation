---
// Smart Video Section mit Viewport Detection und Performance-Optimierung
---

<section id="video" class="relative min-h-screen flex items-center justify-center overflow-hidden">
  <!-- Video Background Container -->
  <div class="absolute inset-0 z-0" id="video-container">
    <!-- Video Element -->
    <video 
      id="background-video"
      class="absolute inset-0 w-full h-full object-cover"
      muted
      loop
      playsinline
      preload="metadata"
      poster="src/assets/images/image_Berge.JPG"
    >
      <source src="src/assets/videos/video_von_bergen.mp4" type="video/mp4"/>
      <source src="src/assets/videos/video_von_bergen und wald.mp4" type="video/mp4"/>
      <!-- Fallback for browsers that don't support video -->
      <img src="src/assets/images/image_Berge.JPG" alt="Fallback Background" class="w-full h-full object-cover">
    </video>
    
    <!-- Video Overlay -->
    <div class="absolute inset-0 bg-black/40 z-10"></div>
    
    <!-- Gradient Overlays -->
    <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-black/30 z-20"></div>
    <div class="absolute inset-0 bg-gradient-to-r from-dopamine-900/20 via-transparent to-electric-900/20 z-20"></div>
  </div>

  <!-- Content Overlay -->
  <div class="relative z-30 text-center text-white max-w-4xl mx-auto px-6">
    <!-- Glass Card with Content -->
    <div class="video-glass-card p-8 md:p-12 rounded-3xl backdrop-blur-xl border border-white/20 video-content opacity-0 translate-y-8">
      <h2 class="text-4xl md:text-6xl lg:text-7xl font-serif font-bold mb-6 leading-tight">
        <span class="block">Bewegung</span>
        <span class="block bg-gradient-to-r from-dopamine-400 to-electric-400 bg-clip-text text-transparent">in Perfektion</span>
      </h2>
      
      <p class="text-xl md:text-2xl text-gray-200 mb-8 max-w-2xl mx-auto leading-relaxed">
        Erlebe die Magie des Moments durch cinematische Videografie. 
        <span class="text-dopamine-400 font-medium">Jede Sekunde z√§hlt.</span>
      </p>
      
      <!-- Video Stats -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="video-stat">
          <div class="text-3xl md:text-4xl font-bold text-dopamine-400 mb-2">200+</div>
          <div class="text-gray-300">Projekte</div>
        </div>
        <div class="video-stat">
          <div class="text-3xl md:text-4xl font-bold text-electric-400 mb-2">4K</div>
          <div class="text-gray-300">Ultra HD</div>
        </div>
        <div class="video-stat">
          <div class="text-3xl md:text-4xl font-bold text-dopamine-400 mb-2">24/7</div>
          <div class="text-gray-300">Support</div>
        </div>
      </div>
      
      <!-- Action Buttons -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
        <button class="video-cta-primary group" id="play-reel-btn">
          <svg class="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z"/>
          </svg>
          <span>Showreel abspielen</span>
        </button>
        
        <button class="video-cta-secondary group">
          <span>Videografie anfragen</span>
          <svg class="w-5 h-5 ml-2 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Video Controls -->
  <div class="absolute bottom-8 left-8 z-40 flex space-x-4">
    <button id="video-toggle" class="video-control-btn group" title="Video pausieren/abspielen">
      <svg class="w-6 h-6 play-icon" fill="currentColor" viewBox="0 0 24 24">
        <path d="M8 5v14l11-7z"/>
      </svg>
      <svg class="w-6 h-6 pause-icon hidden" fill="currentColor" viewBox="0 0 24 24">
        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
      </svg>
    </button>
    
    <button id="video-mute" class="video-control-btn" title="Ton ein/aus">
      <svg class="w-6 h-6 unmute-icon" fill="currentColor" viewBox="0 0 24 24">
        <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
      </svg>
      <svg class="w-6 h-6 mute-icon hidden" fill="currentColor" viewBox="0 0 24 24">
        <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
      </svg>
    </button>
    
    <button id="video-fullscreen" class="video-control-btn" title="Vollbild">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
      </svg>
    </button>
  </div>

  <!-- Progress Bar -->
  <div class="absolute bottom-0 left-0 right-0 z-40">
    <div class="progress-bar-container">
      <div class="progress-bar" id="video-progress"></div>
    </div>
  </div>

  <!-- Performance Indicator -->
  <div class="absolute top-8 right-8 z-40">
    <div class="performance-indicator" id="perf-indicator">
      <div class="loading-dot"></div>
      <div class="loading-dot"></div>
      <div class="loading-dot"></div>
    </div>
  </div>
</section>

<style>
  /* Video Glass Card */
  .video-glass-card {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(20px);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  /* Video Stats */
  .video-stat {
    @apply text-center transition-all duration-300 hover:scale-105;
  }

  /* Video CTA Buttons */
  .video-cta-primary {
    @apply px-8 py-4 bg-gradient-to-r from-dopamine-500 to-electric-500 text-white rounded-full font-semibold transition-all duration-300 flex items-center relative overflow-hidden;
  }

  .video-cta-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.6s;
  }

  .video-cta-primary:hover::before {
    left: 100%;
  }

  .video-cta-primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 15px 35px rgba(243, 82, 255, 0.4);
  }

  .video-cta-secondary {
    @apply px-8 py-4 border-2 border-white/30 text-white hover:bg-white/10 rounded-full font-semibold transition-all duration-300 flex items-center backdrop-blur-sm;
  }

  .video-cta-secondary:hover {
    transform: translateY(-2px);
    border-color: rgba(243, 82, 255, 0.5);
    box-shadow: 0 10px 25px rgba(243, 82, 255, 0.2);
  }

  /* Video Controls */
  .video-control-btn {
    @apply w-12 h-12 bg-black/50 backdrop-blur-md border border-white/20 rounded-full flex items-center justify-center text-white hover:bg-black/70 transition-all duration-300;
  }

  .video-control-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
  }

  /* Progress Bar */
  .progress-bar-container {
    height: 4px;
    background: rgba(255, 255, 255, 0.2);
    position: relative;
    overflow: hidden;
  }

  .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #f352ff, #00d9ff);
    width: 0%;
    transition: width 0.1s ease;
    position: relative;
  }

  .progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 10px;
    height: 100%;
    background: white;
    border-radius: 0 2px 2px 0;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
  }

  /* Performance Indicator */
  .performance-indicator {
    @apply flex space-x-1 opacity-0 transition-opacity duration-300;
  }

  .performance-indicator.loading {
    opacity: 1;
  }

  .loading-dot {
    width: 8px;
    height: 8px;
    background: #f352ff;
    border-radius: 50%;
    animation: loading-bounce 1.4s ease-in-out infinite both;
  }

  .loading-dot:nth-child(1) { animation-delay: -0.32s; }
  .loading-dot:nth-child(2) { animation-delay: -0.16s; }

  @keyframes loading-bounce {
    0%, 80%, 100% { 
      transform: scale(0);
      opacity: 0.5;
    } 
    40% { 
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Responsive Video */
  @media (max-width: 768px) {
    .video-glass-card {
      padding: 1.5rem !important;
    }
    
    .video-cta-primary,
    .video-cta-secondary {
      padding: 0.75rem 1.5rem !important;
      font-size: 0.9rem !important;
    }
  }

  /* Video fade effect on scroll */
  .video-fade {
    transition: opacity 0.3s ease;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('background-video');
    const videoContainer = document.getElementById('video-container');
    const videoContent = document.querySelector('.video-content');
    const videoToggle = document.getElementById('video-toggle');
    const videoMute = document.getElementById('video-mute');
    const videoFullscreen = document.getElementById('video-fullscreen');
    const progressBar = document.getElementById('video-progress');
    const performanceIndicator = document.getElementById('perf-indicator');
    const playReelBtn = document.getElementById('play-reel-btn');
    
    let isVideoLoaded = false;
    let isInViewport = false;
    let playPromise = undefined;

    // Intersection Observer for Video Section
    const observerOptions = {
      threshold: 0.3,
      rootMargin: '0px'
    };

    const videoObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        isInViewport = entry.isIntersecting;
        
        if (entry.isIntersecting) {
          // Section in viewport - start video and animations
          loadAndPlayVideo();
          animateContent();
          
          // Reduce video opacity based on scroll position
          window.addEventListener('scroll', handleVideoScroll);
        } else {
          // Section out of viewport - pause video
          pauseVideo();
          window.removeEventListener('scroll', handleVideoScroll);
        }
      });
    }, observerOptions);

    videoObserver.observe(document.getElementById('video'));

    // Video Loading and Performance Management
    function loadAndPlayVideo() {
      if (!isVideoLoaded) {
        performanceIndicator.classList.add('loading');
        
        // Load video
        video.load();
        
        video.addEventListener('loadeddata', () => {
          isVideoLoaded = true;
          performanceIndicator.classList.remove('loading');
          playVideo();
        });

        video.addEventListener('error', () => {
          console.warn('Video failed to load, using fallback image');
          performanceIndicator.classList.remove('loading');
          // Fallback to image background
          videoContainer.style.backgroundImage = 'url(src/assets/images/image_Berge.JPG)';
          videoContainer.style.backgroundSize = 'cover';
          videoContainer.style.backgroundPosition = 'center';
        });
      } else if (isInViewport) {
        playVideo();
      }
    }

    function playVideo() {
      if (video && isInViewport) {
        playPromise = video.play();
        
        if (playPromise !== undefined) {
          playPromise.then(() => {
            updatePlayButton(true);
          }).catch(error => {
            console.warn('Video autoplay failed:', error);
            updatePlayButton(false);
          });
        }
      }
    }

    function pauseVideo() {
      if (video && playPromise !== undefined) {
        playPromise.then(() => {
          video.pause();
          updatePlayButton(false);
        }).catch(() => {
          // Video was already paused or failed to play
        });
      }
    }

    // Content Animation
    function animateContent() {
      videoContent.style.opacity = '1';
      videoContent.style.transform = 'translateY(0)';
      videoContent.style.transition = 'all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
    }

    // Video Controls
    function updatePlayButton(isPlaying) {
      const playIcon = videoToggle.querySelector('.play-icon');
      const pauseIcon = videoToggle.querySelector('.pause-icon');
      
      if (isPlaying) {
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
      } else {
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
      }
    }

    videoToggle.addEventListener('click', () => {
      if (video.paused) {
        playVideo();
      } else {
        video.pause();
        updatePlayButton(false);
      }
    });

    videoMute.addEventListener('click', () => {
      const unmuteIcon = videoMute.querySelector('.unmute-icon');
      const muteIcon = videoMute.querySelector('.mute-icon');
      
      video.muted = !video.muted;
      
      if (video.muted) {
        unmuteIcon.classList.add('hidden');
        muteIcon.classList.remove('hidden');
      } else {
        unmuteIcon.classList.remove('hidden');
        muteIcon.classList.add('hidden');
      }
    });

    videoFullscreen.addEventListener('click', () => {
      if (video.requestFullscreen) {
        video.requestFullscreen();
      } else if (video.webkitRequestFullscreen) {
        video.webkitRequestFullscreen();
      } else if (video.mozRequestFullScreen) {
        video.mozRequestFullScreen();
      }
    });

    // Progress Bar
    video.addEventListener('timeupdate', () => {
      if (video.duration) {
        const progress = (video.currentTime / video.duration) * 100;
        progressBar.style.width = progress + '%';
      }
    });

    // Scroll-based Video Opacity
    function handleVideoScroll() {
      const videoSection = document.getElementById('video');
      const rect = videoSection.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      
      // Calculate fade based on section position
      let opacity = 1;
      
      if (rect.top < 0) {
        // Section is being scrolled up
        opacity = Math.max(0, 1 + (rect.top / viewportHeight));
      } else if (rect.bottom > viewportHeight) {
        // Section is being scrolled down
        opacity = Math.max(0, (viewportHeight - rect.top) / viewportHeight);
      }
      
      video.style.opacity = opacity;
      videoContainer.style.transform = `scale(${1 + (1 - opacity) * 0.1})`;
    }

    // Showreel Button
    playReelBtn.addEventListener('click', () => {
      // Here you would typically open a modal with the showreel
      alert('Showreel feature coming soon!');
    });

    // Performance Optimization
    // Reduce video quality on slower connections
    if (navigator.connection && navigator.connection.effectiveType) {
      const connectionSpeed = navigator.connection.effectiveType;
      if (connectionSpeed === 'slow-2g' || connectionSpeed === '2g') {
        video.style.display = 'none';
        videoContainer.style.backgroundImage = 'url(/src/assets/images/image_Berge.JPG)';
        videoContainer.style.backgroundSize = 'cover';
        videoContainer.style.backgroundPosition = 'center';
      }
    }

    // Pause video when page is not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        pauseVideo();
      } else if (isInViewport) {
        playVideo();
      }
    });

    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
      if (video) {
        video.pause();
        video.removeAttribute('src');
        video.load();
      }
    });
  });
</script>