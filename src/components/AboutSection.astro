---
// Dies ist der "Frontmatter"-Bereich, hier ist für diese Komponente nichts notwendig.
---

<section id="about" class="py-20 lg:py-32 bg-gradient-to-br from-[var(--black)] via-[var(--black)] to-[var(--black)] relative overflow-hidden">  <div class="absolute inset-0 opacity-30 dark:opacity-20">
    <div class="absolute top-1/4 left-0 w-96 h-96 bg-gradient-to-r from-[var(--accent-gold)]/[var(--shadow-soft)] to-[var(--accent-silver)]/[var(--shadow-soft)] rounded-full filter blur-3xl animate-pulse"></div>
    <div class="absolute bottom-1/4 right-0 w-96 h-96 bg-gradient-to-l from-[var(--accent-silver)]/[var(--shadow-soft)] to-[var(--accent-gold)]/[var(--shadow-soft)] rounded-full filter blur-3xl animate-pulse" style="animation-delay: 2s;"></div>
  </div>

  <div class="container mx-auto px-6 lg:px-8 relative z-10">
    <div class="grid lg:grid-cols-2 gap-16 lg:gap-20 items-center max-w-7xl mx-auto">

      <div class="relative">
        <div class="main-portrait-container group">
          <div class="portrait-card perspective-1000">
            <div class="portrait-inner">
              <div class="portrait-front">
                <img
                  src="/public/images/image_mann_potrait.avif"
                  alt="Photographer Portrait"
                  class="w-full h-full object-cover rounded-2xl"
                  loading="lazy"
                >
                <div class="portrait-overlay">
                  <div class="overlay-content">
                    <div class="text-white text-center">
                      <h3 class="text-2xl font-serif font-bold mb-2">Red Rotation</h3>
                      <p class="text-gray-200">Professional Photographer</p>
                    </div>
                  </div>
                </div>
              </div>

              <div class="portrait-back">
                <div class="h-full flex items-center justify-center p-8 bg-gradient-to-br from-[var(--accent-gold)] to-[var(--accent-silver)] rounded-2xl">
                  <div class="text-white text-center">
                    <svg class="w-16 h-16 mx-auto mb-4 opacity-80" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <h3 class="text-xl font-bold mb-2">5+ Jahre Erfahrung</h3>
                    <p class="text-sm opacity-90">Leidenschaft für visuelle Geschichten</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="floating-stats">
          <div class="stat-card stat-card-1" data-tilt>
            <div class="stat-content">
              <div class="stat-number text-[var(--accent-gold)]">500+</div>
              <div class="stat-label">Happy Clients</div>
            </div>
          </div>

          <div class="stat-card stat-card-2" data-tilt>
            <div class="stat-content">
              <div class="stat-number text-[var(--accent-silver)]">1000+</div>
              <div class="stat-label">Projects</div>
            </div>
          </div>

          <div class="stat-card stat-card-3" data-tilt>
            <div class="stat-content">
              <div class="stat-number text-[var(--accent-gold)]">15</div>
              <div class="stat-label">Awards</div>
            </div>
          </div>
        </div>

        <div class="equipment-icons">
          <div class="equipment-icon" data-tooltip="Canon EOS R5" style="--delay: 0s;">
            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
              <path d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
            </svg>
          </div>
          <div class="equipment-icon" data-tooltip="Sony A7R IV" style="--delay: 0.2s;">
            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
              <path d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586l-2 2V6H5v12h14v-2.586l2 2V20a1 1 0 01-1 1H4a1 1 0 01-1-1V4z"/>
              <path d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
          </div>
          <div class="equipment-icon" data-tooltip="DJI Drone" style="--delay: 0.4s;">
            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9l-5 4.74L18.18 22 12 18.27 5.82 22 7 13.74 2 9l6.91-.74L12 2z"/>
            </svg>
          </div>
        </div>
      </div>

      <div class="space-y-8 about-content opacity-0 translate-x-8">
        <div>
          <h2 class="text-5xl lg:text-7xl font-serif font-bold mb-6 leading-tight">
            <span class="block text-[var(--white)]">Über</span>
            <span class="block bg-gradient-to-r from-[var(--accent-gold)] to-[var(--accent-silver)] bg-clip-text text-transparent">mich</span>
          </h2>

          <div class="w-24 h-1 bg-gradient-to-r from-[var(--accent-gold)] to-[var(--accent-silver)] rounded-full mb-8"></div>
        </div>

        <div class="prose prose-lg prose-gray dark:prose-invert max-w-none">
          <p class="text-xl text-[var(--light-gray)] leading-relaxed mb-6">
            Hallo! Ich bin <span class="text-[var(--accent-gold)] font-semibold">ein leidenschaftlicher Fotograf</span>
            mit über 5 Jahren Erfahrung in der visuellen Geschichten erzählung. Meine Reise begann mit einer einfachen Kamera
            und der Faszination für das perfekte Licht.
          </p>

          <p class="text-lg text-[var(--light-gray)] leading-relaxed mb-6">
            Spezialisiert auf <span class="font-semibold">Landschafts-, Portrait- und Sportfotografie</span>,
            bringe ich eine einzigartige Perspektive in jedes Projekt ein. Jeder Moment ist einzigartig,
            und es ist meine Mission, diese Einzigartigkeit einzufangen.
          </p>
        </div>

        

        <div class="pt-8">
          <button class="about-cta-btn group">
            <span>Lerne mich kennen</span>
            <svg class="w-5 h-5 ml-3 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* 3D Portrait Card */
  .main-portrait-container {
    position: relative;
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
  }

  .portrait-card {
    width: 100%;
    height: 500px;
    position: relative;
    cursor: pointer;
  }

  .portrait-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.8s;
    transform-style: preserve-3d;
  }

  /* Hier brauchen wir keine Hover-Farbanpassung, da es ein Transform ist */
  /* .main-portrait-container:hover .portrait-inner {
    transform: rotateY(180deg);
  } */

  .portrait-front, .portrait-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15); /* Schatten beibehalten */
  }

  .portrait-back {
    transform: rotateY(180deg);
  }

  .portrait-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
    display: flex;
    align-items: end;
    padding: 2rem;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .main-portrait-container:hover .portrait-overlay {
    opacity: 1;
  }

  /* Floating Stats Cards */
  .floating-stats {
    position: absolute;
    inset: 0;
    pointer-events: none;
  }

  .stat-card {
    position: absolute;
    width: 120px;
    height: 80px;
    /* Hintergrund und Border anpassen */
    background: rgba(0, 0, 0, 0.8); /* Dunklerer Hintergrund */
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1); /* Weniger auffällige Border */
    border-radius: 1rem;
    padding: 1rem;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2); /* Schatten beibehalten */
    transition: all 0.3s ease;
    pointer-events: auto;
    cursor: pointer;
  }

  /* Der dark-Modus Stil in der Komponente ist jetzt überflüssig,
     da wir den Standard-Stil bereits angepasst haben.
  .dark .stat-card {
    background: rgba(0, 0, 0, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  */

  .stat-card-1 {
    top: 20%;
    right: -20px;
    animation: float 6s ease-in-out infinite;
  }

  .stat-card-2 {
    bottom: 30%;
    left: -30px;
    animation: float 6s ease-in-out infinite;
    animation-delay: 2s;
  }

  .stat-card-3 {
    top: 60%;
    right: -40px;
    animation: float 6s ease-in-out infinite;
    animation-delay: 4s;
  }

  .stat-card:hover {
    transform: translateY(-10px) scale(1.05);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3); /* Etwas dunklerer Schatten beim Hover */
  }

  .stat-content {
    text-align: center;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .stat-number {
    font-size: 1.5rem;
    font-weight: bold;
    line-height: 1;
  }

  .stat-label {
    font-size: 0.75rem;
    color: var(--medium-gray); /* Angepasst */
    margin-top: 0.25rem;
  }

  /* Der dark-Modus Stil in der Komponente ist jetzt überflüssig.
  .dark .stat-label {
    color: #9ca3af;
  }
  */

  /* Equipment Icons */
  .equipment-icons {
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    space-x: 1rem;
    gap: 1rem;
  }

  .equipment-icon {
    width: 60px;
    height: 60px;
    /* Hintergrund und Border angepasst */
    background: rgba(0, 0, 0, 0.8); /* Dunklerer Hintergrund */
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1); /* Weniger auffällige Border */
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--light-gray); /* Angepasst */
    cursor: pointer;
    transition: all 0.3s ease;
    animation: slideUp 0.6s ease calc(var(--delay)) both;
    position: relative;
  }

  /* Der dark-Modus Stil in der Komponente ist jetzt überflüssig.
  .dark .equipment-icon {
    background: rgba(0, 0, 0, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: #9ca3af;
  }
  */

  .equipment-icon:hover {
    transform: translateY(-5px) scale(1.1);
    color: var(--accent-gold); /* Akzentfarbe angepasst */
    box-shadow: 0 15px 30px var(--shadow-deep); /* Schattenfarbe anpassen */
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Tooltips */
  .equipment-icon::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 120%;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 0.5rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .equipment-icon:hover::after {
    opacity: 1;
  }

  /* Skills Section */
  .skill-bar {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.1); /* Hellere Bar auf dunklem Hintergrund */
    border-radius: 4px;
    overflow: hidden;
  }

  .skill-progress {
    height: 100%;
    background: linear-gradient(90deg, var(--accent-gold), var(--accent-silver)); /* Akzentfarben angepasst */
    border-radius: 4px;
    width: 0%;
    transition: width 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    animation-delay: var(--delay);
    position: relative;
  }

  .skill-progress.electric {
    background: linear-gradient(90deg, var(--accent-silver), var(--accent-gold)); /* Akzentfarben angepasst */
  }

  .skill-progress::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    animation: shimmer 2s infinite;
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  /* CTA Button */
  .about-cta-btn {
    /* Tailwind-Klassen anpassen, um globale Variablen zu nutzen */
    @apply px-8 py-4 text-white rounded-full font-semibold transition-all duration-300 flex items-center relative overflow-hidden;
    background: linear-gradient(90deg, var(--accent-gold), var(--accent-silver)); /* Akzentfarben angepasst */
  }

  .about-cta-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.6s;
  }

  .about-cta-btn:hover::before {
    left: 100%;
  }

  .about-cta-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 15px 35px var(--shadow-deep); /* Schattenfarbe anpassen */
  }

  /* Float Animation - beibehalten */
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
  }

  /* Responsive - beibehalten */
  @media (max-width: 1024px) {
    .floating-stats {
      display: none;
    }

    .equipment-icons {
      position: relative;
      bottom: auto;
      left: auto;
      transform: none;
      justify-content: center;
      margin-top: 2rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Intersection Observer for About Section
    const aboutContent = document.querySelector('.about-content');
    const skillItems = document.querySelectorAll('.skill-item');

    // Nur beobachten, wenn aboutContent gefunden wurde
    if (aboutContent) {
      const observerOptions = {
        threshold: 0.3,
        rootMargin: '0px 0px -100px 0px'
      };

      const aboutObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Animate main content
            // Type assertion to HTMLElement
            const targetAboutContent = entry.target as HTMLElement;
            targetAboutContent.style.opacity = '1';
            targetAboutContent.style.transform = 'translateX(0)';
            targetAboutContent.style.transition = 'all 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';

            // Animate skills with delay
            setTimeout(() => {
              animateSkills();
            }, 500);
          }
        });
      }, observerOptions);

      aboutObserver.observe(aboutContent);
    }

    // Skills Animation
    function animateSkills() {
      skillItems.forEach((item, index) => {
        // Type assertion to HTMLElement
        const progressBar = item.querySelector('.skill-progress') as HTMLElement;
        if (progressBar) { // Überprüfung, ob progressBar existiert
          const targetWidth = progressBar.dataset.width; // dataset ist jetzt sicher zugreifbar
          if (targetWidth) { // Überprüfen, ob data-width existiert
            setTimeout(() => {
              progressBar.style.width = targetWidth;
            }, index * 200);
          }
        }
      });
    }

    // 3D Tilt Effect for Stat Cards
    const statCards = document.querySelectorAll('[data-tilt]');

    statCards.forEach(card => {
      // Type assertion to HTMLElement
      const htmlCard = card as HTMLElement;
      htmlCard.addEventListener('mousemove', (e) => {
        const rect = htmlCard.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;

        const rotateX = (y - centerY) / 4;
        const rotateY = (centerX - x) / 4;

        htmlCard.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateY(-10px) scale(1.05)`;
      });

      htmlCard.addEventListener('mouseleave', () => {
        htmlCard.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) translateY(0) scale(1)';
      });
    });

    // Enhanced Portrait Card Interaction
    const portraitCard = document.querySelector('.portrait-card');
    let isFlipped = false;

    if (portraitCard) { // Überprüfung, ob portraitCard existiert
      portraitCard.addEventListener('click', () => {
        isFlipped = !isFlipped;
        // Type assertion to HTMLElement
        const inner = portraitCard.querySelector('.portrait-inner') as HTMLElement;

        if (inner) { // Überprüfung, ob inner existiert
          if (isFlipped) {
            inner.style.transform = 'rotateY(180deg)';
          } else {
            inner.style.transform = 'rotateY(0deg)';
          }
        }
      });
    }

    // Parallax effect for floating elements
    window.addEventListener('scroll', () => {
      const scrolled = window.pageYOffset;
      const rate = scrolled * -0.5;

      document.querySelectorAll('.stat-card').forEach((card, index) => {
        // Type assertion to HTMLElement
        const htmlCard = card as HTMLElement;
        const speed = 0.5 + (index * 0.1);
        htmlCard.style.transform = `translateY(${rate * speed}px)`;
      });
    });

    // Equipment icons hover effect enhancement
    const equipmentIcons = document.querySelectorAll('.equipment-icon');

    equipmentIcons.forEach(icon => {
      // Type assertion to HTMLElement
      const htmlIcon = icon as HTMLElement;
      htmlIcon.addEventListener('mouseenter', () => {
        // Add glow effect
        // Angepasste Schattenfarbe
        htmlIcon.style.boxShadow = `0 15px 30px var(--shadow-deep), 0 0 20px var(--shadow-soft)`;

        // Slight shake animation
        htmlIcon.style.animation = 'shake 0.5s ease-in-out';
      });

      htmlIcon.addEventListener('mouseleave', () => {
        htmlIcon.style.boxShadow = '';
        htmlIcon.style.animation = '';
      });
    });

    // Add shake keyframes dynamically
    const style = document.createElement('style');
    style.textContent = `
      @keyframes shake {
        0%, 100% { transform: translateY(-5px) scale(1.1) rotate(0deg); }
        25% { transform: translateY(-5px) scale(1.1) rotate(1deg); }
        75% { transform: translateY(-5px) scale(1.1) rotate(-1deg); }
      }
    `;
    document.head.appendChild(style);

    // Performance optimization: Reduce animations on mobile
    const isMobile = window.innerWidth < 768;
    if (isMobile) {
      document.querySelectorAll('.stat-card').forEach(card => {
        (card as HTMLElement).style.animation = 'none'; // Type assertion here as well
      });
    }
  });
</script>